
# main.py - FastAPI app entry point
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from auth import authenticate

from news import fetch_news
from openai_report import get_openai_report

# Create FastAPI app
app = FastAPI(title="Trade Opportunities API")

# In-memory session tracking for rate limiting
user_sessions = {}
RATE_LIMIT = 5

# Response model for the /analyze endpoint
class AnalysisResponse(BaseModel):
    report: str

# Main endpoint: Analyze a sector and return a markdown report
@app.get("/analyze/{sector}", response_model=AnalysisResponse)
async def analyze_sector(sector: str, username: str = Depends(authenticate)):
    # Rate limiting: max 5 requests per user/session
    if user_sessions.get(username, 0) >= RATE_LIMIT:
        raise HTTPException(status_code=429, detail="Rate limit exceeded")
    user_sessions[username] = user_sessions.get(username, 0) + 1

    # Input validation: sector name must be alphabetic
    if not sector.isalpha():
        raise HTTPException(status_code=400, detail="Invalid sector name")

    # Fetch market news for the sector
    market_data = await fetch_news(sector)

    # Try to generate markdown report using OpenAI
    try:
        report = get_openai_report(sector, market_data)
    except Exception as e:
        # If OpenAI fails, show only the news data
        report = (
            f"# Market Analysis: {sector.capitalize()}\n\n"
            f"**Sector:** {sector}\n\n"
            f"## Current Market Data\n{market_data}\n\n"
            f"---\n*Generated by Trade Opportunities API*\n"
            f"\n**AI Analysis unavailable: {str(e)}**"
        )
    return AnalysisResponse(report=report)

# Root endpoint: Welcome/info
@app.get("/")
def root():
    return {"message": "Welcome to the Trade Opportunities API. Use /analyze/{sector} endpoint."}
